"""
A valid absolute URL string starting with either a valid protocol or a leading www
"""
scalar AbsoluteUrl

type AskYesNoBroadcastTopic implements Broadcast & Topic {
  id: String
  name: String
  contentType: String
  text: String
  saidYes: String!
  saidYesTopicId: String!
  saidYesTopic: Topic
  saidNo: String!
  saidNoTopicId: String!
  saidNoTopic: Topic
  invalidAskYesNoResponse: String!
}

type AutoReplyBroadcast implements Broadcast {
  id: String
  name: String
  contentType: String
  text: String
  topicId: String!
  topic: AutoReplyTopic
}

type AutoReplySignupTopic implements Topic {
  id: String
  name: String
  contentType: String
  campaignId: Int!
  autoReply: String!

  """The campaign that this topic should create signups for."""
  campaign: Campaign
}

type AutoReplyTopic implements Topic {
  id: String
  name: String
  contentType: String
  autoReply: String!
}

interface Broadcast {
  id: String
  name: String
  contentType: String
  text: String
}

"""A campaign."""
type Campaign {
  """The time when this campaign was originally created."""
  createdAt: DateTime

  """The time when this campaign ends."""
  endDate: DateTime

  """The unique ID for this campaign."""
  id: Int!

  """The internal name used to identify the campaign."""
  internalTitle: String!

  """The time when this campaign starts."""
  startDate: DateTime

  """The time when this campaign last modified."""
  updatedAt: DateTime
}

type Conversation {
  id: String!
  userId: String!
  platform: String!
  createdAt: DateTime
  updatedAt: DateTime
  topicId: String!
  messages: [Message]

  """The user this conversation is with."""
  user: User

  """The current topic of the conversation."""
  topic: Topic
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type LegacyBroadcast implements Broadcast {
  id: String
  name: String
  contentType: String
  text: String
}

"""A media resource on a post."""
type Media {
  """The image URL."""
  url(
    """The desired image width, in pixels."""
    w: Int

    """The desired image height, in pixels."""
    h: Int
  ): AbsoluteUrl

  """The text content of the post, provided by the user."""
  text: String
}

type Message {
  id: String!
  direction: String!
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
  topicId: String
  text: String
  template: String
  match: String

  """
  The user this message was sent to or from (depending on message direction).
  """
  user: User

  """The topic that conversation was set to when the message was created."""
  topic: Topic
}

"""
The mutation root of our GraphQL schema. Start here if you want to write data
"""
type Mutation {
  """Add or remove a reaction to a post. Requires an access token."""
  toggleReaction(
    """The post ID to react to."""
    postId: Int!
  ): Post
}

type PhotoPostBroadcast implements Broadcast {
  id: String
  name: String
  contentType: String
  text: String
  topicId: String!
  topic: PhotoPostTopic
}

type PhotoPostTopic implements Topic {
  id: String
  name: String
  contentType: String
  campaignId: Int!
  startPhotoPostAutoReply: String!
  askQuantity: String!
  invalidQuantity: String!
  askPhoto: String!
  invalidPhoto: String!
  askCaption: String!
  invalidCaption: String!
  askWhyParticipated: String!
  invalidWhyParticipated: String!
  completedPhotoPost: String!
  completedPhotoPostAutoReply: String!

  """
  The campaign that this topic should create signups and photo posts for.
  """
  campaign: Campaign
}

"""A user's post on a campaign."""
type Post {
  """The unique ID for this post."""
  id: Int!

  """The type of action (e.g. 'photo', 'voterReg', or 'text')."""
  type: String!

  """
  The specific action being performed (or 'default' on a single-action campaign).
  """
  action: String!

  """The Northstar user ID of the user who created this post."""
  userId: String!

  """The Rogue campaign ID this post was made for."""
  campaignId: String

  """The attached media for this post."""
  media: Media @deprecated(reason: "Use direct 'url' and 'text' properties instead.")

  """The image URL."""
  url(
    """The desired image width, in pixels."""
    w: Int

    """The desired image height, in pixels."""
    h: Int
  ): AbsoluteUrl

  """The text content of the post, provided by the user."""
  text: String

  """The ID of the associated signup for this post."""
  signupId: String!

  """The associated signup for this post."""
  signup: Signup

  """The review status of the post."""
  status: ReviewStatus

  """The source of this post. This is often a Northstar OAuth client."""
  source: String

  """The number of items added or removed in this post."""
  quantity: Int

  """
  The tags that have been applied to this post by DoSomething.org staffers.
  """
  tags: [String]

  """The total number of reactions to this post."""
  reactions: Int

  """Has the current user reacted to this post?"""
  reacted: Boolean

  """The IP address this post was created from."""
  remoteAddr: String @deprecated(reason: "This field is no longer stored.")

  """The time this post was last modified."""
  updatedAt: DateTime

  """The time when this post was originally created."""
  createdAt: DateTime

  """The user who created this post."""
  user: User
}

"""
The query root of our GraphQL schema. Start here if you want to read data.
"""
type Query {
  """Get a user by ID."""
  user(id: String!): User

  """Get a campaign by ID."""
  campaign(id: Int!): Campaign

  """Get a paginated collection of campaigns."""
  campaigns(
    """The internal title to load campaigns for."""
    internalTitle: String

    """The page of results to return."""
    page: Int = 1

    """The number of results per page."""
    count: Int = 20
  ): [Campaign]

  """Get a post by ID."""
  post(
    """The desired post ID."""
    id: Int!
  ): Post

  """Get a paginated collection of posts."""
  posts(
    """The action name to load posts for."""
    action: String

    """# The campaign ID to load posts for."""
    campaignId: String

    """# The post source to load posts for."""
    source: String

    """# The type name to load posts for."""
    type: String

    """# The user ID to load posts for."""
    userId: String

    """# The page of results to return."""
    page: Int = 1

    """# The number of results per page."""
    count: Int = 20
  ): [Post]

  """ Get a paginated collection of posts by campaign ID."""
  postsByCampaignId(
    """The campaign ID to load."""
    id: String!

    """The page of results to return."""
    page: Int = 1

    """The number of results per page."""
    count: Int = 20
  ): [Post]

  """Get a paginated collection of posts by user ID."""
  postsByUserId(
    """The Northstar user ID to filter posts by."""
    id: String!

    """The page of results to return."""
    page: Int = 1

    """The number of results per page."""
    count: Int = 20
  ): [Post]

  """Get a signup by ID."""
  signup(id: Int!): Signup

  """Get a paginated collection of signups."""
  signups(
    """The Campaign ID load signups for."""
    campaignId: String

    """The signup source to load signups for."""
    source: String

    """The user ID to load signups for."""
    userId: String

    """The page of results to return."""
    page: Int = 1

    """The number of results per page."""
    count: Int = 20

    """How to order the results (e.g. 'id,desc')."""
    orderBy: String = "id,desc"
  ): [Signup]

  """Get a paginated collection of signups by user ID."""
  signupsByUserId(
    """The Northstar user ID to filter signups by."""
    id: String!

    """The page of results to return."""
    page: Int = 1

    """The number of results per page."""
    count: Int = 20

    """How to order the results (e.g. 'id,desc')."""
    orderBy: String = "id,desc"
  ): [Signup]
  conversation(id: String!): Conversation
  conversations(page: Int = 1, count: Int = 20): [Conversation]
  conversationsByUserId(id: String!, page: Int = 1, count: Int = 20): [Conversation]
  message(id: String!): Message
  messages(page: Int = 1, count: Int = 20): [Message]
  messagesByConversationId(id: String!, page: Int = 1, count: Int = 20): [Message]
  broadcast(id: String!): Broadcast
  topic(id: String!): Topic
}

"""Posts are reviewed by DoSomething.org staff for content."""
enum ReviewStatus {
  ACCEPTED
  REJECTED
  PENDING
  REGISTER_FORM
  REGISTER_OVR
  CONFIRMED
  INELIGIBLE
  UNCERTAIN
}

"""The user's role defines their abilities on any DoSomething.org site."""
enum Role {
  USER
  STAFF
  ADMIN
}

"""A user's signup for a campaign."""
type Signup {
  """The unique ID for this signup."""
  id: Int!

  """The associated posts made under this signup."""
  posts: [Post]

  """The associated campaign for this signup."""
  campaign: Campaign

  """The Rogue campaign ID this post was made for."""
  campaignId: String

  """The Drupal campaign run ID this signup was made for."""
  campaignRunId: String @deprecated(reason: "We no longer stored campaign run IDs.")

  """The Northstar ID of the user who created this signup."""
  userId: String

  """The total number of items on all posts attached to this signup."""
  quantity: Int

  """The user's self-reported reason for doing this campaign."""
  whyParticipated: String

  """The source of this signup (e.g. sms, phoenix-next)"""
  source: String

  """
  More information about the signup (for example, third-party messaging opt-ins).
  """
  details: String

  """The time this signup was last modified."""
  updatedAt: DateTime

  """The time when this signup was originally created."""
  createdAt: DateTime

  """Permalink to Admin view."""
  permalink: String

  """The user who created this signup."""
  user: User
}

"""The user's SMS subscription status."""
enum SubscriptionStatus {
  """User is actively subscribed to messaging."""
  ACTIVE

  """User has requested to receive fewer broadcasts."""
  LESS

  """User has texted STOP to unsubscribe from messaging."""
  STOP

  """
  The mobile number is invalid, cannot receive texts, or texted STOP in the past.
  """
  UNDELIVERABLE

  """An unknown issue exists with this user's SMS subscription."""
  UNKNOWN

  """
  User has received an askSubscriptionStatus broadcast but never answered with valid preference.
  """
  PENDING
}

type TextPostBroadcast implements Broadcast {
  id: String
  name: String
  contentType: String
  text: String
  topicId: String!
  topic: TextPostTopic
}

type TextPostTopic implements Topic {
  id: String
  name: String
  contentType: String
  campaignId: Int!
  invalidText: String!
  completedTextPost: String!

  """
  The campaign that this topic should create signups and text posts for.
  """
  campaign: Campaign
}

interface Topic {
  id: String
  name: String
  contentType: String
}

"""A DoSomething.org user profile."""
type User {
  """The user's Northstar ID."""
  id: String!

  """The user's first name."""
  firstName: String

  """The user's last name."""
  lastName: String

  """The user's last initial."""
  lastInitial: String

  """The user's email address."""
  email: String

  """The user's mobile number."""
  mobile: String

  """The user's birthdate, formatted YYYY-MM-DD."""
  birthdate: Date

  """The user's street address. Null if unauthorized."""
  addrStreet1: String

  """
  The user's extended street address (for example, apartment number). Null if unauthorized.
  """
  addrStreet2: String

  """The user's city. Null if unauthorized."""
  addrCity: String

  """The user's state. Null if unauthorized."""
  addrState: String

  """The user's 6-digit zip code. Null if unauthorized."""
  addrZip: String

  """
  The user's registration source. This is often a Northstar OAuth client.
  """
  source: String

  """
  More information about the user's registration source (for example, a campaign or broadcast ID).
  """
  sourceDetail: String

  """The user's SMS status."""
  smsStatus: SubscriptionStatus

  """
  The user's conversation status will be paused if they are in a support conversation.
  """
  smsPaused: Boolean

  """
  The user's language, as reported by their browser when they registered.
  """
  language: String

  """The user's ISO-3166  country code."""
  country: String

  """The user's role."""
  role: Role

  """
  The user's voter registration status, either self-reported or by registering with TurboVote.
  """
  voterRegistrationStatus: VoterRegistrationStatus

  """
  The time this user was created. See the 'source' and 'source_detail' field for details.
  """
  createdAt: DateTime

  """The last modified time for this user account."""
  updatedAt: DateTime

  """
  The last time this user visited DoSomething.org on the web (accurate within an hour).
  """
  lastAccessedAt: DateTime

  """
  The last time this user logged-in to DoSomething.org with their username & password.
  """
  lastAuthenticatedAt: DateTime

  """The last time this user messaged DoSomething.org via Gambit."""
  lastMessagedAt: DateTime

  """
  Whether user plans to vote in upcoming election (e.g. 'voting', 'voted', 'not_sure')
  """
  votingPlanStatus: String

  """Who user plans to attend polls with to vote in upcoming election."""
  votingPlanAttendingWith: String

  """How user plans to get to the polls to vote in upcoming election."""
  votingPlanMethodOfTransport: String

  """
  What time of day user plans to get the polls to vote in upcoming election.
  """
  votingPlanTimeOfDay: String

  """The posts created by this user."""
  posts: [Post]

  """The signups created by this user."""
  signups: [Signup]

  """The conversations created by this user."""
  conversations: [Conversation]
}

enum VoterRegistrationStatus {
  REGISTRATION_COMPLETE
  CONFIRMED
  INELIGIBLE
  UNCERTAIN
}
